<?php

/**
 * @file
 * Contains Drupal\saibher_tracking\saibher_tracking.module.
 */

/**
 * @defgroup saibher_tracking Example: Content Entity
 * @ingroup examples
 * @{
 * Implement a content entity.
 *
 * This module demonstrates implementing a content entity.
 *
 * Entity API is the API that stores pieces of content and configuration for
 * Drupal core. For instance, if you've encountered node content types, you've
 * encountered entities of type 'node.'
 *
 * This example implements the Entity API so that we have an entity type usable
 * by the user which you might think of as specialized nodes, but which are
 * different from nodes. These entities are called Tracking, and are known
 * internally by the machine name saibher_tracking_Tracking.
 *
 * Tracking is a fieldable content entity used to hold structured information
 * without the overhead of using a node content type. 'Fieldable' means you can
 * attach fields to it, like you can with nodes. It is defined programmatically
 * (completely in code). We will show the main techniques to handle and expose
 * the contents of this entity type.
 *
 * The Tracking entity will demonstrate the main tasks for an entity:
 * - define
 * - save
 * - load
 * - view
 * - edit
 * - delete
 * - control access
 *
 * Where ever possible, we use the amazing tools built into D8 natively.
 *
 * @see Drupal\saibher_tracking\Entity\Tracking
 * @see config_entity_example
 * }
 */


 use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_entity_type_alter().
 */
function saibher_tracking_entity_type_alter(array &$entity_types) {
  // Agregar alteraciones aquí.
}